import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id 'net.researchgate.release' version '2.1.0'
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	repositories {
		mavenCentral()
	}
}

def scriptsDir = "${buildDir}/scripts"
def appendixDir = "${buildDir}/appendix"

task cleanUpVcsAndIcsFolders(type: Delete) {
	delete "${project.rootDir}/vcs"
	delete "${project.rootDir}/ics"
}

clean.dependsOn 'cleanUpVcsAndIcsFolders'


task copyTestFiles (type: Copy) {
	from "${project.rootDir}/src/test/resources/vcs"
	into "${project.rootDir}/vcs"
}

processTestResources.dependsOn 'copyTestFiles'

task fatJar (type: Jar) {
	baseName = shortName
	manifest {
		attributes(	'Implementation-Title': project.name,
					'Implementation-Version': version,
					'Main-Class': 'net.sourceforge.users.dragomerlin.vcs2icsCalendarConverter.Main')
	}
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task processScripts (type: Copy) {
	from ("${project.rootDir}/src/main/bat") {
		filter(ReplaceTokens, tokens: [archiveName: fatJar.archiveName])
	}
	into scriptsDir
}

task processAppendix (type: Copy) {
	File file = file("authors.md")
	def authors = []
	file.eachLine { line ->
		if (!line.allWhitespace) {
			def author
			def start = line.indexOf("[")
			if (start > -1) {
				author = (line.substring(start + 1, line.indexOf("]")))
			} else {
				author = line
			}
			authors += author
		}
	}
	def authorsString
	authors.each {author ->
		if (authorsString != null) {
			authorsString += ", " + author
		} else {
			authorsString = author
		}
	}
	
	from ('authors.md')
	from ('readme.md') {
		filter(ReplaceTokens, tokens: [projectName: project.name, version: version, authors: authorsString, archiveName: jar.archiveName])
	}
	
	into appendixDir 
}

task buildReleaseZip(type: Zip) {
	dependsOn 'fatJar', 'processScripts', 'processAppendix'
	baseName = shortName
	
	def files = files(
		fatJar.archivePath, 
		scriptsDir)
	from files
}

assemble.dependsOn 'buildReleaseZip'


release {
	tagTemplate = 'v$version'
}

dependencies {
	compile 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'
	compile 'commons-codec:commons-codec:1.7'
	compile 'commons-io:commons-io:2.4'
}
		
eclipse.classpath {
	file {
		beforeMerged { classpath -> 
			def jreEntries = classpath.entries.findAll { entry ->
				entry.kind.equals('con') &&
				entry.path.contains('org.eclipse.jdt.launching.JRE_CONTAINER')
			}
			classpath.entries.removeAll(jreEntries)
		}
	}
	if (JavaVersion.current() > targetCompatibility) {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-$sourceCompatibility"
	}
}


eclipseJdt {
	enabled = false
}